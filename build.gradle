buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.9'
    }
}


apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'
apply plugin: 'com.matthewprenger.cursegradle'


ext.buildProps = file "build.properties"

version = "NIGHTLY"
if (System.getenv("BUILD_NUMBER") != null) {
	version = "${System.getenv("BUILD_NUMBER")}"
}
if (System.getenv("DRONE_BUILD_NUMBER") != null) {
	version = "${System.getenv("DRONE_BUILD_NUMBER")}"
}
if (System.getenv("APPVEYOR_BUILD_NUMBER") != null) {
	version = "${System.getenv("APPVEYOR_BUILD_NUMBER")}"
}

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}a" + getBuildNumber()
group = "extracells"
archivesBaseName = "ExtraCells"
def actualVersion = version


task outputVersionToFile {
	def versionFile = new File("version.txt")
	versionFile.write("${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}")
	
	def oldVersion = new File("versionOld.txt")
	if(!oldVersion.exists()) {
		oldVersion.write("0.0.0")
	}
}
//build.dependsOn outputVersionToFile


sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

logger.lifecycle "$archivesBaseName-$version"
logger.lifecycle "" + version

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "../../MinecraftDebug/run_client"
	mappings = "${config.version.mappings}"
	
	replace '@VERSION@', "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}"
}
	
repositories {
    maven {
        name 'Mobius Repo'
        url "http://mobiusstrip.eu/maven"
    }
	
	maven {
		name 'Open Computers'
		url "http://maven.cil.li/"
	}
	
	maven {
		name 'prog'
		url "http://dvs1.progwml6.com/files/maven"
	}
	
	maven {
        name 'amadornes'
        url "http://maven.amadornes.com/"
    }

    //ivy {
    //    name "BuildCraft"
    //    artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    //}
	
	ivy { 
		name 'WirelessCraftingTerminal' 
		artifactPattern "http://addons-origin.cursecdn.com/files/${config.cf.wc}/[module]-[revision].[ext]" 
	}
	
	ivy { 
		name 'p455w0rdslib' 
		artifactPattern "http://addons-origin.cursecdn.com/files/${config.cf.pl}/[module]-[revision].[ext]" 
	}
	
	//ivy { 
	//	name 'appliedenergistics2' 
	//	artifactPattern "http://addons-origin.cursecdn.com/files/${config.cf.ae}/[module]-[revision].[ext]" 
	//} 
	
	ivy { 
		name 'Mekanism' 
		artifactPattern "http://addons-origin.cursecdn.com/files/${config.cf.me}/[module]-[revision].[ext]" 
	}
	maven {
		name = "tehnut"
		url = "http://tehnut.info/maven"
	}
	
	maven {
		name = "CoFH Maven"
		url = "http://maven.covers1624.net"
	}

}

dependencies {
	//compile ("mcp.mobius.waila:Waila:${config.version.waila}"){
    //    transitive = false
	//}
	
	deobfCompile ("mcp.mobius.waila:Hwyla:${config.version.waila}") {
		transitive = false
	}
	
	deobfCompile "cofh:RedstoneFlux:${config.version.rf}:universal"
	
	deobfProvided ("li.cil.oc:OpenComputers:${config.version.oc}:api")
	runtime ("li.cil.oc:OpenComputers:${config.version.oc}")

	deobfProvided "mezz.jei:jei_${config.version.minecraft}:${config.version.jei}:api"
	runtime "mezz.jei:jei_${config.version.minecraft}:${config.version.jei}"
	
    //compile name: "buildcraft", version: "${config.version.bc}", classifier: "dev", ext: 'jar'
	
	deobfCompile name: 'WirelessCraftingTerminal', version: config.version.wc, ext: 'jar'
	deobfCompile name: 'p455w0rdslib', version: config.version.pl, ext: 'jar'
	
	deobfCompile ("appeng:appliedenergistics2:${config.version.ae}"){
		transitive = false
	}
	
	//compile name: 'appliedenergistics2', version: config.version.ae, classifier: "dev", ext: 'jar'
	
	deobfCompile name: 'Mekanism', version: config.version.me, ext: 'jar'
	deobfCompile "MCMultiPart2:MCMultiPart:${config.version.mcmp}"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.lang'
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.lang'
        include '**/*.info'
        include '**/*.properties'

        expand 'version': "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}", 'mcversion': project.minecraft.version
    }
}

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.scala
    from sourceSets.main.java
    classifier = 'api'
	include 'extracells/api/**'
}

if (System.getenv("CURSEFORGE_API_KEY") != null) {
	curseforge {
	  apiKey = System.getenv("CURSEFORGE_API_KEY")
	  project {
		id = config.cf.project.id
		addGameVersion config.version.minecraft
		changelog = ''
		releaseType = config.cf.project.type
		relations {
			requiredLibrary 'applied-energistics-2'
		}
		addArtifact(apiJar) {
			releaseType = 'alpha'
		}
		mainArtifact(jar) {
			displayName = "$archivesBaseName-${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}"
		}
	  }
	}
}

artifacts {
    archives apiJar
}

def getBuildNumber() {
    if (System.getenv("BUILD_NUMBER") != null) {
        return "${System.getenv("BUILD_NUMBER")}"
    }
    else if (System.getenv("DRONE_BUILD_NUMBER") != null) {
        return "${System.getenv("DRONE_BUILD_NUMBER")}"
    }
	else if (System.getenv("APPVEYOR_BUILD_NUMBER") != null) {
        return "${System.getenv("APPVEYOR_BUILD_NUMBER")}"
    }
    return "NIGHTLY"
}

idea {
    module {
        outputDir = file('build/classes/main')
    }
}
